/*
    FUNCTIONS
*/
/* abs */
p {
  font-size: 10px; }

/* append($list, $val, $separator:auto) */
/*
    append(10px 20px, 30px) => 10px 20px 30px
    append((blue, red), green) => blue, red, green
    append(10px 20px, 30px 40px) => 10px 20px (30px 40px)
    append(10px, 20px, comma) => 10px, 20px
    append((blue, red), green, space) => blue red green
*/
/* call($function, $args...) */
/*
    call(rgb, 10, 100, 255) => #0a64ff

    $fn: nth;
    call($fn, (a b c), 2) => b
*/
/* function_exists($name) */
/*
    function-exists(lighten) => true

    @function myfunc { @return "something"; }
    function-exists(myfunc) => true
*/
/* if($condition, $if-true, $if-false) */
/*
    if(true, 1px, 2px) => 1px
    if(false, 1px, 2px) => 2px
*/
/* index($list, $value) */
/*
    index(1px solid red, solid) => 2
    index(1px solid red, dashed) => null
    index((width: 10px, height: 20px), (height 20px)) => 2
*/
/* is_bracketed($list) */
/*
    is-bracketed(1px 2px 3px) => false
    is-bracketed([1px, 2px, 3px]) => true
*/
/* is_superselector($super, $sub) */
/*
    is-superselector(".foo", ".foo.bar") => true
    is-superselector(".foo.bar", ".foo") => false
    is-superselector(".bar", ".foo .bar") => true
    is-superselector(".foo .bar", ".bar") => false
*/
/* join($list1, $list2, $separator:auto, $bracketed:auto) */
/*
    join(10px 20px, 30px 40px) => 10px 20px 30px 40px
    join((blue, red), (#abc, #def)) => blue, red, #abc, #def
    join(10px, 20px) => 10px 20px
    join(10px, 20px, comma) => 10px, 20px
    join((blue, red), (#abc, #def), space) => blue red #abc #def
    join([10px], 20px) => [10px 20px]
*/
/* length($list) */
/*
    length(10px) => 1
    length(10px 20px 30px) => 3
    length((width: 10px, height: 20px)) => 2
*/
/* list_separator($list) */
/*
    list-separator(1px 2px 3px) => space
    list-separator(1px, 2px, 3px) => comma
    list-separator('foo') => space
*/
/* map_get($map, $key) */
/*
    map-get(("foo": 1, "bar": 2), "foo") => 1
    map-get(("foo": 1, "bar": 2), "bar") => 2
    map-get(("foo": 1, "bar": 2), "baz") => null
*/
/* map_has_key($map, $key) */
/*
    map-has-key(("foo": 1, "bar": 2), "foo") => true
    map-has-key(("foo": 1, "bar": 2), "baz") => false
*/
/* map_keys($map) */
/*
    map-keys(("foo": 1, "bar": 2)) => "foo", "bar"
*/
/* map_merge($map1, $map2) */
/*
    map-merge(("foo": 1), ("bar": 2)) => ("foo": 1, "bar": 2)
    map-merge(("foo": 1, "bar": 2), ("bar": 3)) => ("foo": 1, "bar": 3)
*/
/* map_remove($map, $keys...) */
/*
    map-remove(("foo": 1, "bar": 2), "bar") => ("foo": 1)
    map-remove(("foo": 1, "bar": 2, "baz": 3), "bar", "baz") => ("foo": 1)
    map-remove(("foo": 1, "bar": 2), "baz") => ("foo": 1, "bar": 2)
*/
/* map_values($map) */
/*
    map-values(("foo": 1, "bar": 2)) => 1, 2
    map-values(("foo": 1, "bar": 2, "baz": 1)) => 1, 2, 1
*/
/* nth($list, $n) */
/*
    nth(10px 20px 30px, 1) => 10px
    nth((Helvetica, Arial, sans-serif), 3) => sans-serif
    nth((width: 10px, length: 20px), 2) => length, 20px
*/
/* percentage($number) */
/*
    percentage(0.2) => 20%
    percentage(100px / 50px) => 200%
*/
/* quote($string) */
/*
    quote("foo") => "foo"
    quote(foo) => "foo"
*/
/* rgb($red, $green, $blue) */
/* rgba($red, $green, $blue, $alpha) rgba($color, $alpha) */
/* selector_append($selectors...) */
/*
    selector-append(".foo", ".bar", ".baz") => .foo.bar.baz
    selector-append(".a .foo", ".b .bar") => "a .foo.b .bar"
    selector-append(".foo", "-suffix") => ".foo-suffix"
*/
/* set-nth($list, $n, $value)  */
/*
    set-nth($list: 10px 20px 30px, $n: 2, $value: -20px) => 10px -20px 30px
*/
/* str_index($string, $substring) */
/*
    str-index(abcd, a)  => 1
    str-index(abcd, ab) => 1
    str-index(abcd, X)  => null
    str-index(abcd, c)  => 3
*/
/* str_insert($string, $insert, $index) */
/*
    str-insert("abcd", "X", 1) => "Xabcd"
    str-insert("abcd", "X", 4) => "abcXd"
    str-insert("abcd", "X", 5) => "abcdX"
*/
/* str_length($string) */
/* str-length("foo") => 3 */
/* str_slice($string, $start-at, $end-at:-1) */
/*
    str-slice("abcd", 2, 3)   => "bc"
    str-slice("abcd", 2)      => "bcd"
    str-slice("abcd", -3, -2) => "bc"
    str-slice("abcd", 2, -2)  => "bc"
*/
/* to_lower_case($string) */
/* to_upper_case($string) */
/* type_of($value) */
/*
    type-of(100px)  => number
    type-of(asdf)   => string
    type-of("asdf") => string
    type-of(true)   => bool
    type-of(#fff)   => color
    type-of(blue)   => color
    type-of(null)   => null
    type-of(a b c)  => list
    type-of((a: 1, b: 2)) => map
    type-of(get-function("foo")) => function
*/
/* unit($number) */
/*
    unit(100) => ""
    unit(100px) => "px"
    unit(3em) => "em"
    unit(10px * 5em) => "em*px"
    unit(10px * 5em / 30cm / 1rem) => "em*px/cm*rem"
*/
/* unitless($number) */
/*
    unitless(100) => true
    unitless(100px) => false
*/
/* unquote($string) */
/*
    unquote("foo") => foo
    unquote(foo) => foo
*/
/* variable_exists($name) */
/*
    $a-false-value: false;

    variable-exists(a-false-value) => true
    variable-exists(a-null-value) => true
    variable-exists(nonexistent) => false
*/
/* zip($lists...) */
/*
    zip(1px 1px 3px, solid dashed solid, red green blue)
    => 1px solid red, 1px dashed green, 3px solid blue
*/
